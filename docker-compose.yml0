services:
#    # Kafka et Zookeeper
#    zookeeper:
#        image: wurstmeister/zookeeper:3.7.0
#        container_name: zookeeper
#        ports:
#            - "2181:2181"
#        networks:
#            - backend
#
#    kafka:
#        image: wurstmeister/kafka:latest
#        container_name: kafka
#        environment:
#            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#            KAFKA_LISTENER_NAMES: INSIDE,OUTSIDE
#            KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#            KAFKA_LISTENER_NAME_TO_REPLICA_FETCHER: INSIDE
#            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#        ports:
#            - "9092:9092"
#        networks:
#            - backend
#
#    redis:
#        image: redis:latest
#        container_name: redis
#        ports:
#            - "6379:6379"
#        networks:
#            - backend
#
#    # Services Scrapy Cluster
#    scrapy_cluster:
#        image: scrapy-cluster/scrapy-cluster:latest
#        container_name: scrapy_cluster
#        environment:
#            - CLUSTER_MODE=true
#            - REDIS_HOST=redis
#            - KAFKA_HOST=kafka
#            - SCRAPY_PROJECT_NAME=my_project
#        networks:
#            - backend
#
#    rest:
#        image: scrapy-cluster/scrapy-rest:latest
#        container_name: scrapy_rest
#        environment:
#            - REDIS_HOST=redis
#            - KAFKA_HOST=kafka
#        ports:
#            - "6800:6800"
#        networks:
#            - backend
#
#    monitor:
#        image: scrapy-cluster/scrapy-monitor:latest
#        container_name: scrapy_monitor
#        environment:
#            - REDIS_HOST=redis
#            - KAFKA_HOST=kafka
#        networks:
#            - backend
    
    # ELK Stack
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        env_file:
            - .env
        user: "0"
        environment:
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
            LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
            KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
        command: >
            bash -c '
                if [ x${ELASTIC_PASSWORD} == x ]; then
                  echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                  exit 1;
                elif [ x${KIBANA_PASSWORD} == x ]; then
                  echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                  exit 1;
                fi;
                if [ ! -f config/certs/ca.zip ]; then
                  echo "Creating CA";
                  bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                  unzip config/certs/ca.zip -d config/certs;
                fi;
                if [ ! -f config/certs/certs.zip ]; then
                  echo "Creating certs";
                  echo -ne \
                  "instances:\n"\
                  "  - name: es01\n"\
                  "    dns:\n"\
                  "      - es01\n"\
                  "      - localhost\n"\
                  "    ip:\n"\
                  "      - 127.0.0.1\n"\
                  > config/certs/instances.yml;
                  bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                  unzip config/certs/certs.zip -d config/certs;
                fi;
                echo "Setting file permissions"
                chown -R root:root config/certs;
                find . -type d -exec chmod 750 \{\} \;;
                find . -type f -exec chmod 640 \{\} \;;
                echo "Waiting for Elasticsearch availability";
                until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
                echo "Setting kibana_system password";
                until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
                echo "All done!";
              '
        
        healthcheck:
            test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
            interval: 1s
            timeout: 5s
            retries: 120
            
    # Elasticsearch : Base de donn√©es NOSQL
    es01:
        depends_on:
            setup:
                condition: service_healthy
        env_file:
            - .env
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        labels:
            co.elastic.logs/module: elasticsearch
        container_name: elasticsearch
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - elasticsearch_data:/usr/share/elasticsearch/data
        environment:
            node.name: es01
            server.host: 0.0.0.0
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            discovery.type: single-node
            cluster.name: ${CLUSTER_NAME}
            bootstrap.memory_lock: true
            xpack.security.authc.api_key.enabled: true
            xpack.security.enabled: true
            xpack.security.http.ssl.enabled: true
            xpack.security.http.ssl.key: certs/es01/es01.key
            xpack.security.http.ssl.certificate: certs/es01/es01.crt
            xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
            xpack.security.transport.ssl.enabled: true
            xpack.security.transport.ssl.key: certs/es01/es01.key
            xpack.security.transport.ssl.certificate: certs/es01/es01.crt
            xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
            xpack.security.transport.ssl.verification_mode: none
            xpack.license.self_generated.type: ${LICENSE}
        ports:
            - "9200:9200"
        restart: always
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
              [
                  "CMD-SHELL",
                  "curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'",
              ]
            interval: 10s
            timeout: 10s
            retries: 120
        networks:
            - elk_network
    
    logstash:
        depends_on:
            es01:
                condition: service_healthy
            kibana:
                condition: service_healthy
#            - kafka
        env_file:
            - .env
        image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
        labels:
            co.elastic.logs/module: logstash
        user: root
        container_name: logstash
        volumes:
            - certs:/usr/share/logstash/config/certs:ro
            - "./elk_stack/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
            - "./data/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
            - logstash_data:/usr/share/logstash/data
        environment:
            LS_JAVA_OPTS: -Xms256m -Xmx256m
            xpack.monitoring.enabled: false
            ELASTIC_USER: elastic
            ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
            ELASTIC_HOSTS: ${ELASTIC_HOSTS}
        restart: always
        networks:
            - elk_network
    
    kibana:
        depends_on:
            es01:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        container_name: kibana
        env_file:
            - .env
        volumes:
            - ./elk_stack/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
            - certs:/usr/share/kibana/config/certs:ro
            - kibana_data:/usr/share/kibana/data
        ports:
            - ${KIBANA_PORT}:5601
        environment:
            SERVERNAME: kibana
#            ELASTIC_HOSTS: ${ELASTIC_HOSTS}
#            ELASTIC_USERNAME: ${KIBANA_USERNAME}
#            ELASTIC_PASSWORD: ${KIBANA_PASSWORD}
            ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
            KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
        restart: always
        mem_limit: ${KB_MEM_LIMIT}
        healthcheck:
            test:
              [
                  "CMD-SHELL",
                  "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
              ]
            interval: 10s
            timeout: 10s
            retries: 120
        networks:
            - elk_network

volumes:
    certs:
        driver: local
    elasticsearch_data:
        driver: local
    logstash_data:
        driver: local
    kibana_data:
        driver: local
        
networks:
    elk_network:
        driver: bridge
        
  